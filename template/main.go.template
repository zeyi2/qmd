// template
package main

import (
	"bufio"
	"crypto/md5"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"sort"
	"strings"
)

type QuizData struct {
	Questions      []Question `json:"questions"`
	CorrectAnswers []string   `json:"correct_answers"` // for the grader
}

type Question struct {
	Text    string            `json:"question"`
	Options map[string]string `json:"options"`
}

const encodedData = "{{ENCODED_DATA}}"
const phaseName = "{{PHASE_NAME}}"

func main() {
	jsonData, err := base64.StdEncoding.DecodeString(encodedData)
	if err != nil {
		fmt.Println("Error: Could not decode quiz data.")
		os.Exit(1)
	}

	var quiz QuizData
	if err := json.Unmarshal(jsonData, &quiz); err != nil {
		fmt.Println("Error: Could not parse quiz data.")
		os.Exit(1)
	}

    // Example, To be discussed, functionality good.
	fmt.Printf("--- 欢迎来到 %s 阶段测试 ---\n", phaseName)
	fmt.Println("请依次回答以下问题。")
	fmt.Println("---------------------------------")

	userAnswers := make([]string, len(quiz.Questions))
	reader := bufio.NewReader(os.Stdin)

	for i, q := range quiz.Questions {
		fmt.Printf("\n第 %d/%d 题: %s\n", i+1, len(quiz.Questions), q.Text)

		var keys []string
		for k := range q.Options {
			keys = append(keys, k)
		}
		sort.Strings(keys)

		for _, k := range keys {
			fmt.Printf("  %s. %s\n", k, q.Options[k])
		}
        
		var validAnswer bool
		for !validAnswer {
			fmt.Print("你的选择 (A/B/C/D): ")
			input, _ := reader.ReadString('\n')
			answer := strings.ToUpper(strings.TrimSpace(input))

			if _, ok := q.Options[answer]; ok {
				userAnswers[i] = answer
				validAnswer = true
			} else {
				fmt.Println("无效输入，请输入 A, B, C, 或 D 中的一个。")
			}
		}
	}
	generateResultFile(userAnswers)
}

func generateResultFile(answers []string) {
	answerString := strings.Join(answers, "")

	hash := md5.Sum([]byte(answerString))
	hashString := fmt.Sprintf("%x", hash)

	resultFileName := fmt.Sprintf("%s.result", phaseName)

	err := ioutil.WriteFile(resultFileName, []byte(hashString), 0644)
	if err != nil {
		fmt.Printf("\nError: 无法创建结果文件 %s\n", resultFileName)
		os.Exit(1)
	}

	fmt.Println("\n---------------------------------")
	fmt.Printf("答题完成！结果已保存到 %s 文件中。\n", resultFileName)
	fmt.Println("请将此文件 commit 并 push 到你的 Git 仓库的正确分支中。")
}
